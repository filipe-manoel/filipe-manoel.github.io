'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, 9.95, 21.54, 7.25,10, 20, 10.01)
)
library(asreml)
asreml(fixed = y ~ rept,)
asreml(fixed = y ~ rept,
random = ~gen,
data=data)
a = asreml(fixed = y ~ rept,
random = ~gen,
data=data)
summary(a)$varcomp
6.170083  /26.425123
X = model.matrix(y ~-1 + rept, data = data)
Z = model.matrix(y ~-1 + gen, data= data)
XlX = crossprod(X)
ZlZ = crossprod(Z)
XlZ = crossprod(X, Z)
ZlX = crossprod(Z, X)
Xly = crossprod(X, data$y)
Zly = crossprod(Z, data$y)
sigma2g = 26.42
sigma2e = 6.17
G = sigma2g*diag(1,5)
R = sigma2e*diag(1,10)
H = tcrossprod(Z %*% G, Z) + R
Hinv = solve(H)
BLUE = solve(crossprod(X, Hinv) %*% X) %*% (crossprod(X, Hinv)%*%na.omit(data$y))
BLUP = (tcrossprod(G, Z) %*% Hinv) %*% (data$y - X %*% BLUE)
coef(a)
BLUP
BLUE
14.158-0.398
#| echo: true
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, NA, 21.54, NA,10, 20, 10.01)
)
a = asreml(fixed = y ~ rept,
random = ~gen,
data=data)
summary(a)$varcomp
X = model.matrix(y ~ -1 + rept, data)
Z = model.matrix(y~-1 + gen, data= data)
XlX = crossprod(X)
ZlX = crossprod(Z, X)
ZlZ = crossprod(Z)
XlZ = crossprod(X, Z)
Xly = crossprod(X, na.omit(data$y))
Zly = crossprod(Z, na.omit(data$y))
sigma2g = 19.82
sigma2e = 11.93
G = sigma2g*diag(1,5)
R = sigma2e*diag(1,8)
H = tcrossprod(Z %*% G, Z) + R
Hinv = solve(H)
BLUE = solve(crossprod(X, Hinv) %*% X) %*% (crossprod(X, Hinv)%*%na.omit(data$y))
BLUP = (tcrossprod(G, Z) %*% Hinv) %*% (na.omit(data$y) - X %*% BLUE)
coef(a)
BLUP
#| echo: true
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, NA, 21.54, NA,10, 20, 10.01)
)
data
#| echo: true
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, NA, 21.54, NA,10, 20, NA)
)
library(asreml)
a = asreml(fixed = y ~ rept,random = gen, data = data)
a = asreml(fixed = y ~ rept,random = ~gen, data = data)
coef(a)
predict(a, classify = "gen")
data
#| echo: true
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, NA, 16, 18.25, NA, 21.54, NA,10, 20, NA)
)
a = asreml(fixed = y ~ rept,random = ~gen, data = data)
predict(a, classify = "gen")
data = read.csv("https://raw.githubusercontent.com/saulo-chaves/Theo-grandiflorum-MH/main/data.csv",sep = ';')
data = data[data$Harvests == "Yr5",]
head(data)
data = transform(data,
Hybrids = factor(Hybrids),
Replicates = factor(Replicates))
str(data)
mod.dbc = asreml(fixed = yd ~ Replicates,
random = ~Hybrids,
data = data)
mod.dbc.red = asreml(fixed = yd ~ Replicates,
data = data)
lrt.asreml(mod.dbc, mod.dbc.red)
summary(mod.dbc)$varcomp
compvar = summary(mod.dbc)$varcomp
sig2f = sum(compvar[,1]); sig2f
sig2f_med = compvar["Hybrids","component"]+compvar["units!R","component"]/
nlevels(data$Replicates);sig2f_med
pred = predict(mod.dbc, classify = "Hybrids", vcov = T)
PEVi = diag(pred$vcov)
confi = 1-(PEVi/compvar["Hybrids","component"]) #Confiabilidade por tratamento
acu = sqrt(1-mean(PEVi)/compvar["Hybrids","component"]) #Acurácia
View(pred$vcov)
pred$vcov
pred$vcov@x
pred$vcov
a = pred$vcov
a
View(a)
a
View(pred$pvals)
PEVi = pred$pvals$std.error
confi = 1-(PEVi/compvar["Hybrids","component"]) #Confiabilidade por tratamento
acu = sqrt(1-mean(PEVi)/compvar["Hybrids","component"]) #Acurácia
confi
pred$pvals
confi
(pred$pvals$std.error)^2
pred = predict(mod.dbc, classify = "Hybrids", vcov = T)
PEVi = (pred$pvals$std.error)^2
confi = 1-(PEVi/compvar["Hybrids","component"]) #Confiabilidade por tratamento
acu = sqrt(1-mean(PEVi)/compvar["Hybrids","component"]) #Acurácia
confi
acu
compvar
H2in = vpredict(mod.dbc, H2in ~ V1/(V1+V2))
H2in
nlevels(data$Replicates)
H2med = vpredict(mod.dbc, H2med ~ V1/(V1+(V2)/nlevels(data$Replicates)))
H2med = vpredict(mod.dbc, H2med ~ V1/(V1+(V2)/10))
H2med
numrep = nlevels(data$Replicates)
H2med = vpredict(mod.dbc, H2med ~ V1/(V1+(V2/numrep)))
H2med
H2med = vpredict(mod.dbc, H2med ~ V1/((V1+V2)/numrep))
H2med
compvar$component
compvar["Hybrids","component"]
compvar
H2med = compvar["Hybrids","component"]/(compvar["Hybrids","component"]+
(compvar["units!R","component"]/numrep))
H2med
data.frame(
"Parâmetro" = c("Acurácia","Herdabilidade (individual)","Herdabilidade (médias)"),
"Valor" = c(acu, H2in, H2med)
)
H2med
data.frame(
"Parâmetro" = c("Acurácia","Herdabilidade (individual)","Herdabilidade (médias)"),
"Valor" = c(acu, H2in$Estimate, H2med)
)
data.frame(
"Parâmetro" = c("Acurácia","Herdabilidade (individual)","Herdabilidade (médias)"),
"Valor" = c(acu, H2in$Estimate, H2med)
)%>% kbl(escape = F, align = 'c',digits = 4) %>%
kable_classic("hover",full_width = F, position="center")
library(kableExtra)
data.frame(
"Parâmetro" = c("Acurácia","Herdabilidade (individual)","Herdabilidade (médias)"),
"Valor" = c(acu, H2in$Estimate, H2med)
)%>% kbl(escape = F, align = 'c',digits = 4) %>%
kable_classic("hover",full_width = F, position="center")
data.dbi = read.csv('https://raw.githubusercontent.com/Kaio-Olimpio/Probability-for-GEI/master/maize_dataset.csv')
data.dbi = data.dbi[data.dbi$Location == 'E15',]
head(data.dbi)
head(data.dbi) %>%  kbl(escape = F, align = 'c') %>%
kable_classic("hover",full_width = T, position="center", fixed_thead = T)
data.dbi = transform(data.dbi,
Hybrid = factor(Hybrid),
Rep = factor(Rep),
Block = factor(Block))
mod.dbi = asreml(fixed = GY ~ Rep,
random = ~Hybrid + Block,
data = data.dbi)
mod.dbi = update(mod.dbi)
mod.dbi.red = asreml(fixed = GY ~ Rep,
random = ~ Block,
data = data.dbi)
lrt(mod.dbi, mod.dbi.red)
summary(mod.dbi)$varcomp
PEVi = pred$pvals$predicted.value
PEVi
PEVi = (pred$pvals$predicted.value)^2
PEVi
confi = 1-(PEVi/compvar["Hybrid","component"]) #Confiabilidade por tratamento
acu = sqrt(1-mean(PEVi)/compvar["Hybrid","component"]) #Acurácia
confi
pred = predict(mod.dbi, classify = "Hybrid", vcov = T)
pred$pvals
PEVi = (pred$pvals$std.error)^2
confi = 1-(PEVi/compvar["Hybrid","component"]) #Confiabilidade por tratamento
acu = sqrt(1-mean(PEVi)/compvar["Hybrid","component"]) #Acurácia
acu
PEVi = (pred$pvals$std.error)^2
PEVi
confi = 1-(PEVi/compvar["Hybrid","component"]) #Confiabilidade por tratamento
confi
confi = 1-(PEVi/compvar["Hybrid","component"]) #Confiabilidade por tratamento
(compvar = summary(mod.dbi)$varcomp)
compvar = summary(mod.dbi)$varcomp
PEVi = (pred$pvals$std.error)^2
confi = 1-(PEVi/compvar["Hybrid","component"]) #Confiabilidade por tratamento
confi
acu = sqrt(1-mean(PEVi)/compvar["Hybrid","component"]) #Acurácia
acu
compvar
H2 = vpredict(mod.dbi, h2 ~ V2/(V1+V2+V3))
H2
H2
pred = predict(mod.dbi, classify = "Hybrid")
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, 9.95, 21.54, 7.25,10, 20, 10.01)
)
str(data)
X = model.matrix(y ~ -1 + rept, data = data)
X
Z = model.matrix(y ~ -1 + gen, data = data)
Z
# Produtos
XlX = crossprod(X)
XlX
ZlZ = crossprod(Z)
ZlZ
XlZ = crossprod(X,Z)
ZlX = crossprod(Z,X)
t(X) %*% Z
t(X) %*% Z
XlZ
Xly = crossprod(X, data$y)
Xly
Zly = crossprod(Z, data$y)
Zly
# H
sigma2g = 26.42
sigma2e = 6.17
nlevels(data$gen)
sigma2g
diag(x = 1, nlevels(data$gen))
G = sigma2g * diag(x = 1, nlevels(data$gen))
G
dim(data)
R = sigma2e * diag(x = 1, dim(data)[1])
R
H = tcrossprod(Z %*% G, Z) + R
H
Hinv = solve(H)
solve(crossprod(X, Hinv) %*% X)
BLUE = solve(crossprod(X, Hinv) %*% X) %*% (crossprod(X, Hinv)%*%na.omit(data$y))
BLUE
BLUP = (tcrossprod(G, Z) %*% Hinv) %*% (data$y - X %*% BLUE)
BLUP
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, NA, 21.54, NA,10, 20, 10.01)
)
X = model.matrix(y ~ -1 + rept, data = data)
Z = model.matrix(y ~ -1 + gen, data = data)
XlX = crossprod(X)
ZlZ = crossprod(Z)
XlZ = crossprod(X,Z)
ZlX = crossprod(Z,X)
Xly = crossprod(X, data$y)
Xly = crossprod(X, data$y)
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, NA, 21.54, NA,10, 20, 10.01)
)
X = model.matrix(y ~ -1 + rept, data = data)
Z = model.matrix(y ~ -1 + gen, data = data)
# Produtos
XlX = crossprod(X)
ZlZ = crossprod(Z)
XlZ = crossprod(X,Z)
ZlX = crossprod(Z,X)
Xly = crossprod(X, data$y)
data$y
Xly = crossprod(X, na.omit(data$y))
Zly = crossprod(Z, na.omit(data$y))
na.omit(data$y)
# H
sigma2g = 19.82
sigma2e = 11.93
G = sigma2g * diag(x = 1, nlevels(data$gen))
R = sigma2e * diag(x = 1, dim(data)[1])
H = tcrossprod(Z %*% G, Z) + R
dim(Z)
dim(G)
dim(R)
library(asreml)
data = read.csv("https://raw.githubusercontent.com/saulo-chaves/Theo-grandiflorum-MH/main/data.csv",sep = ';')
rm(list=ls())
data = read.csv("https://raw.githubusercontent.com/saulo-chaves/Theo-grandiflorum-MH/main/data.csv",sep = ';')
data = data[data$Harvests == "Yr5",]
data = transform(data,
Replicates = factor(Replicates),
Hybrids = factor(Hybrids))
mod.dbc = asreml(fixed = yd ~ rept,
random = ~gen,
data = data)
mod.dbc = asreml(fixed = yd ~ Replicates,
random = ~Hybrids,
data = data)
asreml(fixed = yr ~ Replicates, random = ~Hybrids, data = data)
asreml(fixed = yd ~ Replicates, random = ~Hybrids, data = data)
#modelo reduzido
mod.dbc.red = asreml(fixed = yd ~ Replicates,
data= data)
lrt(mod.dbc, mod.dbc.red)
summary(mod.dbc)$varcomp
compvar = summary(mod.dbc)$varcomp
sig2f = sum(compvar[,1]); sig2f
compvar
compvar["Hybrids","component"]
nlevels(data$Replicates)
sig2f_med = compvar["Hybrids","component"]+compvar["units!R","component"]/
nlevels(data$Replicates);sig2f_med
pred = predict(mod.dbc, classify = "Hybrids")
pred$pvals
pred$pvals
pred$pvals$std.error
PEVi = (pred$pvals$std.error)^2
PEVi
confi = 1-(PEVi/compvar["Hybrids","component"]) #Confiabilidade por tratamento
mean(PEVi)
acu = sqrt(1-mean(PEVi)/compvar["Hybrids","component"]) #Acurácia
acu
numrep = nlevels(data$Replicates)
numrep
compvar
H2in = vpredict(mod.dbc, H2in ~ V1/(V1+V2))
H2in
compvar["Hybrids","component"]
H2med = compvar["Hybrids","component"]/(compvar["Hybrids","component"]+
(compvar["units!R","component"]/numrep))
H2med
blup = summary(mod.dbc, coef=T)$coef.random
blup
pred = predict(mod.dbc, classify = "Hybrids")
medblup = pred$pvals
medblup
data =read.txt(data_cupu),sep = ';')
getwd()
data =read.txt(data_cupu.txt),sep = ';')
data =read.txt(data_cupu.txt),sep = ';'
data =read.txt(data_cupu.txt)
data =read.table(data_cupu.txt, sep = ";")
data =read.table(data_cupu.txt, sep = ";")
# Instalar pacotes necessários (se ainda não tiver)
install.packages("lme4")
install.packages("ggplot2")
# Carregar pacotes
library(lme4)
library(ggplot2)
# 🔹 1. Gerar dados simulados: Crescimento de árvores
set.seed(42)  # Para reprodutibilidade
n_locais <- 10  # Número de locais de plantio
n_arvores_por_local <- 30  # Árvores por local
# Criar variáveis
Local <- rep(1:n_locais, each = n_arvores_por_local)
Genotipo <- rep(sample(c("A", "B", "C"), n_locais * n_arvores_por_local, replace = TRUE), 1)
# Efeito fixo do genótipo
Efeito_Genotipo <- ifelse(Genotipo == "A", 0,
ifelse(Genotipo == "B", 2, 4))  # A é o controle, B e C crescem mais
# Efeito aleatório do local (Normal com média 0 e variância 2)
Efeito_Local <- rnorm(n_locais, mean = 0, sd = sqrt(2))
Altura <- 10 + Efeito_Genotipo + Efeito_Local[Local] + rnorm(n_locais * n_arvores_por_local, mean = 0, sd = sqrt(1))
# Criar DataFrame
dados <- data.frame(Local = as.factor(Local), Genotipo = as.factor(Genotipo), Altura = Altura)
View(dados)
# 🔹 2. Ajustar um modelo misto
modelo <- lmer(Altura ~ Genotipo + (1 | Local), data = dados)
remove.packages("Matrix")
remove.packages(Matrix)
remove.packages('Matrix')
# 🔹 2. Ajustar um modelo misto
modelo <- lmer(Altura ~ Genotipo + (1 | Local), data = dados)
library(Matrix)
Matrix
library(Matrix)
# 🔹 2. Ajustar um modelo misto
modelo <- lmer(Altura ~ Genotipo + (1 | Local), data = dados)
install.packages("installr")
library(installr)
updateR()
data = data.frame(
'gen' = factor(rep(paste0("G",1:5),2)),
'rept' = factor(rep(paste0("R",1:2),each= 5)),
'y' = c(18.36, 8.23, 16, 18.25, 9.95, 21.54, 7.25,10, 20, 10.01)
)
X = model.matrix(y ~-1 + rept, data = data)
Z = model.matrix(y ~-1 + gen, data= data)
Xly = crossprod(X, data$y)
Zly = crossprod(Z, data$y)
sigma2g = 26.42
sigma2e = 6.17
G = sigma2g*diag(1,5)
R = sigma2e*diag(1,10)
H = tcrossprod(Z %*% G, Z) + R
Hinv = solve(H)
BLUE = solve(crossprod(X, Hinv) %*% X) %*% (crossprod(X, Hinv)%*%na.omit(data$y))
BLUP = (tcrossprod(G, Z) %*% Hinv) %*% (data$y - X %*% BLUE)
library(lme4)
library(lmerTest)
library(tidyverse)
library(lme4)
library(lmerTest)
library(tidyverse)
set.seed(123)
data = read.table("data_cupu.txt", header = TRUE, sep = ";")
data = data[data$Harvests == "Yr5",]
head(data)
# Ajustando o modelo misto
model <- lmer(yd ~ Replicates + (1 | Hybrids), data = data)  #ajustar o modelo
# Sumário do modelo
summary(model)  # ver o resumo do modelo
# Extraindo os componentes de variância
var_comps <- as.data.frame(VarCorr(model))
var_comps
# Variância do efeito dos híbridos (σ²_g) e erro residual (σ²_e)
sigma2g <- as.numeric(var_comps[var_comps$grp == "Hybrids", "vcov"])
sigma2e <- sigma(model)^2  # sigma(model) retorna o erro residual
# Variância fenotípica individual
sigma2f <- sigma2g + sigma2e
# Herdabilidade em nível individual: H² = σ²_g / σ²_f
H2_ind <- sigma2g / sigma2f; H2_ind
# Calculando o número médio de repetições por híbrido (observando o desbalanceamento)
rep_per_hybrid <- table(data$Hybrid)
mean_reps <- mean(rep_per_hybrid)
# Herdabilidade para as médias dos híbridos: H²_media = σ²_g / (σ²_g + σ²_e / r)
H2_mean <- sigma2g / (sigma2g + sigma2e / mean_reps); H2_mean
var_comps
# Variância do efeito dos híbridos (σ²_g) e erro residual (σ²_e)
sigma2g <- as.numeric(var_comps[var_comps$grp == "Hybrids", "vcov"])
sigma2e <- sigma(model)^2  # sigma(model) retorna o erro residual
# Variância fenotípica individual
sigma2f <- sigma2g + sigma2e
# Herdabilidade em nível individual: H² = σ²_g / σ²_f
H2_ind <- sigma2g / sigma2f; H2_ind
# Calculando o número médio de repetições por híbrido (observando o desbalanceamento)
rep_per_hybrid <- table(data$Hybrid)
mean_reps <- mean(rep_per_hybrid)
# Herdabilidade para as médias dos híbridos: H²_media = σ²_g / (σ²_g + σ²_e / r)
H2_mean <- sigma2g / (sigma2g + sigma2e / mean_reps); H2_mean
# Exibindo os resultados
data.frame(
Parâmetro = c("Variância dos Híbridos (σ²_g)",
"Variância Residual (σ²_e)",
"Variância Fenotípica (σ²_f)",
"Herdabilidade (individual)",
"Herdabilidade (médias)"),
Valor = c(round(sigma2g, 3),
round(sigma2e, 3),
round(sigma2f, 3),
round(H2_ind, 3),
round(H2_mean, 3))
)
# Carregando o pacote merTools
library(merTools)
# Extraindo os BLUPs dos híbridos (efeitos aleatórios)
blups <- ranef(model)$Hybrids
blups <- data.frame(Hybrids = rownames(blups), BLUP = blups[,1])
rownames(blups) <- NULL
View(blups)
# Exibindo os 10 híbridos com maiores BLUPs e seus respectivos erros padrão e confiabilidade
sel = blups %>% arrange(desc(BLUP)) %>% head(10)
DS = mean(as.numeric(sel$BLUP)) - mean(as.numeric(blups$BLUP))
DS
GS = DS*H2_mean
GS
sel
View(sel)
GS
# Exibindo os 10 híbridos com maiores BLUPs e seus respectivos erros padrão e confiabilidade
sel = blups %>% arrange(desc(BLUP)) %>% head(10)
DS = mean(as.numeric(sel$BLUP)) - mean(as.numeric(blups$BLUP))
DS
GS = DS*H2_mean
GS
# Exibindo os 10 híbridos com maiores BLUPs e seus respectivos erros padrão e confiabilidade
sel = blups %>% arrange(desc(BLUP)) %>% head(20)
DS = mean(as.numeric(sel$BLUP)) - mean(as.numeric(blups$BLUP))
DS
GS = DS*H2_mean
GS
# Exibindo os 10 híbridos com maiores BLUPs e seus respectivos erros padrão e confiabilidade
sel = blups %>% arrange(desc(BLUP)) %>% head(30)
DS = mean(as.numeric(sel$BLUP)) - mean(as.numeric(blups$BLUP))
DS
GS = DS*H2_mean
GS
dim(blup)
dim(blups)
# Exibindo os 10 híbridos com maiores BLUPs e seus respectivos erros padrão e confiabilidade
sel = blups %>% arrange(desc(BLUP)) %>% head(34)
DS = mean(as.numeric(sel$BLUP)) - mean(as.numeric(blups$BLUP))
DS
dim(blups)
GS = DS*H2_mean
GS
