# Loading the data
Phenotypes = read.csv("Phenotypes.csv")
# As factor
Phenotypes$Genotype = Phenotypes$Genotype %>% as.factor
rm(list=ls())
require(AGHmatrix)
require(BGLR)
require(tidyverse)
require(dplyr)
require(ggplot2)
# Loading the data
Phenotypes = read.csv("Phenotypes.csv")
# As factor
Phenotypes$Genotype = Phenotypes$Genotype %>% as.factor
Phenotypes$Env = Phenotypes$Env %>% as.factor
Phenotypes[,c(1,3:6)] %>%
pivot_longer(., cols = c('Trait1','Trait2','Trait3','Trait4')) %>%
ggplot(., aes(x = Env, y = value)) +
geom_boxplot(color="brown", fill="orange", alpha=0.2) +
theme(strip.text = element_text(face = "bold", size = 20, colour = 'blue'))+
labs(x = 'Environment', title = "Traits (BLUEs) distribution across environments",y="Density")+
facet_wrap(~name,scales = "free")
# Organizing the phenotypic data
Y<- Phenotypes[,c(1,2,3)] %>%
pivot_wider(., names_from = 'Env', values_from = 'Trait1')
# Scale the data
y = scale(Y[,-1])
head(y)
# SNPs
Genotypes = as.matrix(read.csv("Genotypes.csv"))
#Names
rownames(Genotypes)= unique(Phenotypes$Genotype)
# Additive matrix
G.Mat = AGHmatrix::Gmatrix(Genotypes)
###----------- Parameters for the folds
nReps = 5 #change here for more repetitions (10-20 is a good fit)
nFolds = 5 #5 is reasonable, but it depends of or dataset size
###----------- Output for the estimated values
yHatCV=rep(NA,length(phenodata$Trait1))
# Organizing the phenotypic data
head(Phenotypes)
Y<- Phenotypes[Env == 1,c(1:3)]
Y<- Phenotypes[Phenotypes$Env == 1,c(1:3)]
dim(Y)
head(Y)
# Scale the data
y = scale(Y[,3])
head(y)
head(Y)
###----------- Output for the estimated values
yHatCV=rep(NA,length(Y$Trait1))
# Organizing the phenotypic data
head(Phenotypes)
Y<- Phenotypes[Phenotypes$Env == 1,c(1:3)]
head(Y)
# Scale the data
y = scale(Y[,3])
head(y)
###----------- Parameters for the folds
nReps = 5 #change here for more repetitions (10-20 is a good fit)
nFolds = 5 #5 is reasonable, but it depends of or dataset size
###----------- Output for the estimated values
yHatCV=rep(NA,length(Y$Trait1))
pred = data.frame()
###----------- Model
# Phenodata
y = as.matrix(y)
# Time for the loop
set.seed(0928761)
for(Rep in 1:nReps){
folds=sample(1:nFolds,size=length(phenodata$Trait1),replace=T)
for(i in 1:max(folds)){
tst=which(folds==i)
yNA=y
yNA[tst]=NA
# model
fm=BGLR(y=yNA,
ETA=list(list(K=GMat,model='RKHS')),
nIter=1200,
burnIn=120,
verbose = FALSE)
# Predicted values
yHatCV[tst]=fm$yHat[tst]
}
# Accuracy for each fold
pred=rbind(pred,
data.frame(Repetitions = Rep,
Cor=cor(yHatCV, y)))
}
###----------- Parameters for the folds
nReps = 5 #change here for more repetitions (10-20 is a good fit)
nFolds = 5 #5 is reasonable, but it depends of or dataset size
###----------- Output for the estimated values
yHatCV=rep(NA,length(Y$Trait1))
pred = data.frame()
###----------- Model
# Phenodata
y = as.matrix(y)
# Time for the loop
set.seed(0928761)
for(Rep in 1:nReps){
folds=sample(1:nFolds,size=length(Y$Trait1),replace=T)
for(i in 1:max(folds)){
tst=which(folds==i)
yNA=y
yNA[tst]=NA
# model
fm=BGLR(y=yNA,
ETA=list(list(K=GMat,model='RKHS')),
nIter=1200,
burnIn=120,
verbose = FALSE)
# Predicted values
yHatCV[tst]=fm$yHat[tst]
}
# Accuracy for each fold
pred=rbind(pred,
data.frame(Repetitions = Rep,
Cor=cor(yHatCV, y)))
}
# Organizing the phenotypic data
Y<- Phenotypes[Phenotypes$Env == 1,c(1:3)]
# Scale the pheno data
y = scale(Y[,3])
# Additive matrix
GMat = AGHmatrix::Gmatrix(Genotypes)
###----------- Parameters for the folds
nReps = 5 #change here for more repetitions (10-20 is a good fit)
nFolds = 5 #5 is reasonable, but it depends of or dataset size
###----------- Output for the estimated values
yHatCV=rep(NA,length(Y$Trait1))
pred = data.frame()
###----------- Model
# Phenodata
y = as.matrix(y)
# Time for the loop
set.seed(0928761)
for(Rep in 1:nReps){
folds=sample(1:nFolds,size=length(Y$Trait1),replace=T)
for(i in 1:max(folds)){
tst=which(folds==i)
yNA=y
yNA[tst]=NA
# model
fm=BGLR(y=yNA,
ETA=list(list(K=GMat,model='RKHS')),
nIter=1200,
burnIn=120,
verbose = FALSE)
# Predicted values
yHatCV[tst]=fm$yHat[tst]
}
# Accuracy for each fold
pred=rbind(pred,
data.frame(Repetitions = Rep,
Cor=cor(yHatCV, y)))
}
## Mean for the correlation
mean(pred$Cor)
Y<- Phenotypes[,c(1,2,3)] %>%
pivot_wider(., names_from = 'Env', values_from = 'Trait1')
# Scale the data
y = scale(Y[,-1])
head(y)
require(MTM)
install.packages('MTM')
require('MTM')
##>>----- Partitions for a 5-FCV
tst=which(folds==i)
# nFolds
nFolds = 5
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(Y)[1],replace=T)
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
Y<- Phenotypes[,c(1,2,3)] %>%
pivot_wider(., names_from = 'Env', values_from = 'Trait1')
rm(list=ls())
require(AGHmatrix)
require(BGLR)
require(tidyverse)
require(dplyr)
require(ggplot2)
# Loading the data
Phenotypes = read.csv("Phenotypes.csv")
# As factor
Phenotypes$Genotype = Phenotypes$Genotype %>% as.factor
Phenotypes$Env = Phenotypes$Env %>% as.factor
Phenotypes[,c(1,3:6)] %>%
pivot_longer(., cols = c('Trait1','Trait2','Trait3','Trait4')) %>%
ggplot(., aes(x = Env, y = value)) +
geom_boxplot(color="brown", fill="orange", alpha=0.2) +
theme(strip.text = element_text(face = "bold", size = 20, colour = 'blue'))+
labs(x = 'Environment', title = "Traits (BLUEs) distribution across environments",y="Density")+
facet_wrap(~name,scales = "free")
# SNPs
Genotypes = as.matrix(read.csv("Genotypes.csv"))
#Names
rownames(Genotypes)= unique(Phenotypes$Genotype)
# Additive matrix
GMat = AGHmatrix::Gmatrix(Genotypes)
# Organizing the phenotypic data
Y<- Phenotypes[Phenotypes$Env == 1,c(1:3)]
# Scale the pheno data
y = scale(Y[,3])
# Organizing the phenotypic data
Y<- Phenotypes[,c(1,2,3)] %>%
pivot_wider(., names_from = 'Env', values_from = 'Trait1')
# Scale the data
y = scale(Y[,-1])
head(y)
# nFolds
nFolds = 5
# Set file for accuracy storage
M_GB = data.frame()
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
# nFolds
nFolds = 5
nReps = 5
yHat = data.frame()
# CROSS-VALIDATION CV1 (Predicting traits for new lines)
# nFolds
nFolds = 5
nReps = 5
# Set file for accuracy storage
M_GB = data.frame()
yHat = data.frame()
set.seed(0928761)
for (i in 1:nFolds){
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
##>>----- Model using multitrait
for(p in 1:nReps){
tst=which(folds==p)
yNA=y
yNA[tst]=NA
fm <- Multitrait(y=Y_NA,
ETA = A.GB,
resCov = list(type="DIAG"),
nIter = nIter,
burnIn = burnIn,
thin = thin,
saveAt='MGB_')
yHat[tst] = fm$ETAHat[tst,]
}
PC = diag(cor(y,fm$ETAHat))
M_GB = rbind(M_GB, data.frame(Acc=PC))
}
# CROSS-VALIDATION CV1 (Predicting traits for new lines)
# nFolds
nFolds = 5
nReps = 5
# Set file for accuracy storage
M_GB = data.frame()
yHat = data.frame()
set.seed(0928761)
for (i in 1:nFolds){
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
##>>----- Model using multitrait
for(p in 1:nReps){
tst=which(folds==p)
yNA=y
yNA[tst]=NA
fm <- Multitrait(y=yNA,
ETA = A.GB,
resCov = list(type="DIAG"),
nIter = nIter,
burnIn = burnIn,
thin = thin,
saveAt='MGB_')
yHat[tst] = fm$ETAHat[tst,]
}
PC = diag(cor(y,fm$ETAHat))
M_GB = rbind(M_GB, data.frame(Acc=PC))
}
# CROSS-VALIDATION CV1 (Predicting traits for new lines)
# nFolds
nFolds = 5
nReps = 5
# Set file for accuracy storage
M_GB = data.frame()
yHat = data.frame()
set.seed(0928761)
for (i in 1:nFolds){
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
##>>----- Model using multitrait
for(p in 1:nReps){
tst=which(folds==p)
yNA=y
yNA[tst]=NA
fm <- Multitrait(y=yNA,
ETA = list(list(K=GMat,model='RKHS')),
resCov = list(type="DIAG"),
nIter = nIter,
burnIn = burnIn,
thin = thin,
saveAt='MGB_')
yHat[tst] = fm$ETAHat[tst,]
}
PC = diag(cor(y,fm$ETAHat))
M_GB = rbind(M_GB, data.frame(Acc=PC))
}
# CROSS-VALIDATION CV1 (Predicting traits for new lines)
# nFolds
nFolds = 5
nReps = 5
# Set file for accuracy storage
M_GB = data.frame()
yHat = data.frame()
set.seed(0928761)
for (i in 1:nFolds){
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
##>>----- Model using multitrait
for(p in 1:nReps){
tst=which(folds==p)
yNA=y
yNA[tst]=NA
fm <- Multitrait(y=yNA,
ETA = list(list(K=GMat,model='RKHS')),
resCov = list(type="DIAG"),
nIter = 1200,
burnIn = 120,
saveAt='MGB_')
yHat[tst] = fm$ETAHat[tst,]
}
PC = diag(cor(y,fm$ETAHat))
M_GB = rbind(M_GB, data.frame(Acc=PC))
}
dim(y)[1]
folds
yHat[tst] = fm$ETAHat[tst,]
yHat
yHat = data.frame()
yHat
fm$ETAHat[tst,]
yHat = data.frame(NA,ncol = 4)
yHat
yHat = data.frame(NA,ncol = 4)
yHat
yHat = data.frame(NA,nrow = 500, ncol = 4)
yHat
yHat = data.frame(nrow = 500, ncol = 4)
yHat
yHat[tst] = fm$ETAHat[tst,]
yHat[tst] = fm$ETAHat[tst]
tst
yHat = data.frame(matrix(nrow = 500, ncol = 4))
yHat
data.frame(matrix(nrow = 500, ncol = 4))
yHat[tst] = fm$ETAHat[tst]
fm$ETAHat[tst]
yHat[tst] = fm$ETAHat[tst,]
fm$ETAHat[tst,]
yHat[tst,] = fm$ETAHat[tst,]
# CROSS-VALIDATION CV1 (Predicting traits for new lines)
# nFolds
nFolds = 5
nReps = 5
# Set file for accuracy storage
M_GB = data.frame()
yHat = data.frame(matrix(nrow = 500, ncol = 4))
set.seed(0928761)
for (i in 1:nFolds){
##>>----- Partitions for a 5-FCV
folds=sample(1:nFolds,size=dim(y)[1],replace=T)
##>>----- Model using multitrait
for(p in 1:nReps){
tst=which(folds==p)
yNA=y
yNA[tst]=NA
fm <- Multitrait(y=yNA,
ETA = list(list(K=GMat,model='RKHS')),
resCov = list(type="DIAG"),
nIter = 1200,
burnIn = 120,
saveAt='MGB_')
yHat[tst,] = fm$ETAHat[tst,]
}
PC = diag(cor(y,fm$ETAHat))
M_GB = rbind(M_GB, data.frame(Acc=PC))
}
#--- 1. Setting the NA's
set.seed(12345)
yNA2 <- y
yNA2[sample(1:dim(Y)[1],100),] <- NA
#--- 2. Model
fm2 <- Multitrait(
y = yNA2,
ETA = list(A=list(K=GMat, model='RKHS', Cov = list(type = 'UN'))),
resCov = list(type = 'DIAG'),
nIter = 1200,
burnIn = 120,
thin = 5,
verbose = FALSE)
#--- 3.  Extracting the estimated parameters
YHatInt2 <- fm2$ETAHat
#--- 4. Predictive correlation
test2<-is.na(yNA2)
tstB<-test2[,1] # Same position for all traits
CORB.T1<-cor(YHatInt2[tstB,1],y[tstB,1])
CORB.T2<-cor(YHatInt2[tstB,2],y[tstB,2])
CORB.T3<-cor(YHatInt2[tstB,3],y[tstB,3])
CORB.T4<-cor(YHatInt2[tstB,4],y[tstB,4])
#--- 4. Extracting estimates of variance parameters
(CORB.RES<-fm2$resCov$R) # residual covariance matrix
(CORB.u<-fm2$ETA[[1]]$Cov$Omega) # genetic covariance matrix UE
#--- 5. Trait correlation
cov2cor(CORB.u)
M_GB
PC
M_GB = rbind(M_GB, data.frame(Acc=PC))
M_GB
y
#--- 3.  Extracting the estimated parameters
YHatInt2 <- fm2$ETAHat
yNA2 <- y
yNA2[sample(1:dim(Y)[1],100),] <- NA
yNA2
head(Phenotypes)
# Organizing the phenotypic data
Y<- Phenotypes[Phenotypes$Env == 4,]
Y
# Scale the pheno data
y = scale(Y[,-c(1:2)])
