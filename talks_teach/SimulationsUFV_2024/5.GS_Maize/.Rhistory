# Correlation of the phenotypes with the genetic values
cor(F2_pop1@gv, F2_pop1@pheno)^2
cor(F2_pop2@gv, F2_pop2@pheno)^2
library(AlphaSimR)
# Founder haplotypes
founderPop = runMacs(nInd=1000, nChr=10, segSites=600)
# trait parameters
SP = SimParam$
new(founderPop)$
addTraitA(100)$
addSnpChip(500)$ # Number of SNPs per pair of chromosome
setVarE(h2=0.4)
# Split the founders into two population
pop1 = newPop(founderPop[1:500])
pop2 = newPop(founderPop[501:1000])
#SNPs
SNPop = pullSnpGeno(pop1)
SNPop[1:10,1:10]
# Create a third population derived from the first populations
pop3 = randCross(pop1, nCrosses=1000)
pop3 = setPheno(pop3, h2 = 0.6)
# Train a GS model using the first population
gsModel = RRBLUP(pop1, use = 'pheno') #RRBLUP
pop1@pheno[1:10]
pop1@ebv[1:10]
# Set EBVs for all populations using the GS model
pop1 = setEBV(pop1, gsModel)
pop1@ebv[1:10]
pop2 = setEBV(pop2, gsModel)
pop3 = setEBV(pop3, gsModel)
pop2 = setEBV(pop2, gsModel)
pop3 = setEBV(pop3, gsModel)
# Measure prediction accuracy
cor(gv(pop1), ebv(pop1))
cor(gv(pop2), ebv(pop2))
cor(gv(pop3), ebv(pop3))
# Measure prediction accuracy
cor(gv(pop1), ebv(pop1))
rm(list=ls())
library(AlphaSimR)
# Base genome
founderPop = runMacs(nInd=1000, nChr=10, segSites=600)
# Base genome
founderPop = runMacs(nInd=1000, nChr=10, segSites=600)
# Trait
SP = SimParam$
new(founderPop)$
addTraitAD(100,
meanDD = 0.5,
varDD = 0.2)$
addSnpChip(500)$
setVarE(h2=0.4)
# Split the founders into two population
pop1 = newPop(founderPop[1:500])
pop2 = newPop(founderPop[501:1000])
# Create a third population derived from the first
pop3 = randCross(pop1, nCrosses=1000)
# Train a GS model using the first population
gsModel = RRBLUP(pop1) #RRBLUP
gsModelD = RRBLUP_D(pop1) ##RRBLUP with both, A+D
# Create a third population derived from the first
pop3 = randCross(pop1, nCrosses=1000)
# Train a GS model using the first population
gsModel = RRBLUP(pop1) #RRBLUP
gsModelD = RRBLUP_D(pop1) ##RRBLUP with both, A+D
# Set EBVs for all populations using the additive GS model
pop1 = setEBV(pop1, gsModel)
pop2 = setEBV(pop2, gsModel)
pop3 = setEBV(pop3, gsModel)
# Set EBVs for all populations using additive and dom the GS model
popD1 = setEBV(pop1, gsModelD)
popD2 = setEBV(pop2, gsModelD)
popD3 = setEBV(pop3, gsModelD)
# Measure prediction accuracy
Pop1A = cor(gv(pop1), ebv(pop1))
Pop2A = cor(gv(pop2), ebv(pop2))
Pop3A = cor(gv(pop3), ebv(pop3))
# Measure prediction accuracy
Pop1AD = cor(gv(pop1), ebv(popD1))
Pop2AD = cor(gv(pop2), ebv(popD2))
Pop3AD = cor(gv(pop3), ebv(popD3))
df = data.frame(Pop = c('Pop1', 'Pop2', 'Pop3'),
AModel = c(Pop1A, Pop2A, Pop3A),
ADModel = c(Pop1AD, Pop2AD, Pop3AD))
df
rm(list=ls())
library(AlphaSimR)
# founder genome
founderPop = runMacs(nInd=100, nChr=10, segSites=600)
SP = SimParam$
new(founderPop)$
addTraitAD(100,
meanDD = 0.5,
varDD = 0.2)$
addSnpChip(500)$
setVarE(h2=0.4)
# Split the founders into two populations (distinct groups)
pop = newPop(founderPop[1:100])
# Generate populations for 4 locations - environments
loc1 = setPheno(pop)
loc2 = setPheno(pop)
loc3 = setPheno(pop)
loc4 = setPheno(pop)
# Combine locations into a training population
trainPop = c(loc1, loc2, loc3, loc4)
# Run GS model
gsModel1 = RRBLUP(trainPop)
# Set EBV
pop = setEBV(pop, gsModel1)
# Measure accuracy
AccNofix = cor(gv(pop), ebv(pop))
# Run GS model
gsModel2 = RRBLUP(trainPop)
# Generate populations for 4 locations - environments
loc1 = setPheno(pop, fixEff=1)
loc2 = setPheno(pop, fixEff=2)
loc3 = setPheno(pop, fixEff=3)
loc4 = setPheno(pop, fixEff=4)
# Combine locations into a training population
trainPop = c(loc1, loc2, loc3, loc4)
# Run GS model
gsModel2 = RRBLUP(trainPop)
# Set EBV
pop = setEBV(pop, gsModel2)
# Measure accuracy
AccFix = cor(gv(pop), ebv(pop))
AccNofix
AccFix
rm(list=ls())
library(AlphaSimR)
# founder genome
founderPop = runMacs(nInd=200, nChr=10, segSites=600)
# founder genome
founderPop = runMacs(nInd=200, nChr=10, segSites=600)
# Traits
SP = SimParam$
new(founderPop)$
addTraitAD(100,
mean = c(10,100),
var = c(5, 50),
meanDD = c(0.5, 0.2),
varDD = c(0.2, 0.1))$
addSnpChip(500)$
setVarE(h2=c(0.4, 0.8))
# Traits
SP = SimParam$
new(founderPop)$
addTraitAD(100,
mean = c(10,100),
var = c(5, 50),
meanDD = c(0.5, 0.2),
varDD = c(0.2, 0.1))$
addSnpChip(500)$
setVarE(h2=c(0.4, 0.8))
# Split the founders into two populations (distinct groups)
pop1 = newPop(founderPop[1:100])
pop2 = newPop(founderPop[101:200])
# Create a third population derived from the first
F1Pop = randCross(pop1, nCrosses=1000)
F1Pop = setPheno(F1Pop, h2 = 0.4)
# Train a GS model using the first population
gsModel = RRBLUP(F1Pop, trait = c(1,2)) #RRBLUP
# Set EBVs for all populations using the GS model
pop1 = setEBV(pop1, gsModel)
pop2 = setEBV(pop2, gsModel)
F1Pop = setEBV(F1Pop, gsModel)
# Train a GS model using the first population
gsModel3 = RRBLUP(F1Pop, trait = c(1,2)) #RRBLUP
# Train a GS model using the first population
gsModel3 = RRBLUP(F1Pop, trait = c(1,2)) #RRBLUP
# Set EBVs for all populations using the GS model
pop1 = setEBV(pop1, gsModel)
op2 = setEBV(pop2, gsModel)
F
Pop = setEBV(F1Pop, gsModel)
`
# Set EBVs for all populations using the GS model
pop1 = setEBV(pop1, gsModel3)
pop2 = setEBV(pop2, gsModel3)
F1Pop = setEBV(F1Pop, gsModel3)
# Measure prediction accuracy
Pop1A = diag(cor(gv(pop1), ebv(pop1)))
Pop2A = diag(cor(gv(pop2), ebv(pop2)))
Pop3A = diag(cor(gv(F1Pop), ebv(F1Pop)))
df = data.frame(Pop = c('Pop1', 'Pop2', 'Pop3'),
Trait1 = c(Pop1A[1], Pop2A[1], Pop3A[1]),
Trait2 = c(Pop1A[2], Pop2A[2], Pop3A[2]))
df
rm(list=ls())
# Founder genome
founderGen = runMacs(nInd=100, nChr=10, segSites=600)
# Trait characteristics
SP = SimParam$
new(founderGen)$
addTraitAD(100,
mean = 10,
var = 2)$
addSnpChip(100)$
setVarE(h2=0.5)
# Create the individuals
pop = newPop(founderGen[1:100])
# Create a third population derived from the first
F1Pop = randCross(pop, nCrosses=200)
F1Pop = setPheno(F1Pop, h2 = 0.4)
# 1. Pulling data from AlphaSimR code
y = data.frame(Trait_1 = pheno(F1Pop)) # Phenotypic data
y
Markers = pullSnpGeno(F1Pop) #Access SNP genotype data
rownames(Markers) = F1Pop@id
Markers[1:10,1:10]
dim(Markers)
# 2. Creating the G Matrix
G = AGHmatrix::Gmatrix(Markers)
dim(G)
# 3. Genomic model - Individuals effects
# Model - trait 1
fm_t1 = BGLR(y = y[,1],
ETA=list(A = list(K=G, model="RKHS")),
nIter = 300,
burnIn = 30,
thin = 5,
saveAt = 'STM_',
verbose = FALSE)
require(BGLR)
require(AGHmatrix)
# 3. Genomic model - Individuals effects
# Model - trait 1
fm_t1 = BGLR(y = y[,1],
ETA=list(A = list(K=G, model="RKHS")),
nIter = 300,
burnIn = 30,
thin = 5,
saveAt = 'STM_',
verbose = FALSE)
F1Pop@ebv
# 4. Saving it back to the population
F1Pop@ebv = as.matrix(fm_t1$yHat)
F1Pop@ebv
require(BGLR)
rm(list=ls())
library(AlphaSimR)
# founder genome
founderPop = runMacs(nInd=100, nChr=10, segSites=600)
# founder genome
founderPop = runMacs(nInd=100, nChr=10, segSites=600)
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAD(100,
mean = c(10,100),
var = c(2,10))$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
# Creating the base population
pop = newPop(founderPop[1:100])
# Create a third population derived from the first
F1Pop = randCross(pop, nCrosses=200)
F1Pop = setPheno(F1Pop, h2 = 0.4)
require(BGLR)
# 1. Pulling data from AlphaSimR code
Y = data.frame(Trait_1 = pheno(F1Pop))# Phenotypic data
Y
# 1. Pulling data from AlphaSimR code
Y = data.frame(Trait_1 = pheno(F1Pop))# Phenotypic data
Markers = pullSnpGeno(F1Pop) #Access SNP genotype data
rownames(Markers) = F1Pop@id
# 2. Genomic model - SNP effects model
fmSM<-Multitrait(y = as.matrix(Y),
ETA = list(A = list(X=Markers, model="SpikeSlab", saveEffects=TRUE)),
nIter = 300,
burnIn = 30,
verbose=FALSE)
# 3. Saving
addEff = as.matrix(cbind(fmSM$ETA[[1]]$b))
length(addEff)
# 3. Saving
addEff = as.matrix(cbind(fmSM$ETA[[1]]$b))
length(addEff)
# 4. BackSolving to ebvs
F1Pop@ebv = as.matrix(Markers %*% scale(addEff))
plot(F1Pop@ebv[,1], F1Pop@ebv[,2])
# 5. Selections
F1Sel = selectInd(F1Pop, 25, traits = c(1,2), use = 'ebv')
F1Sel@gxe
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
varGE = 10)$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
VarGE = 10)$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
?SimParam
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
varGxE = 10)$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
# founder genome
founderPop = runMacs(nInd=100, nChr=10, segSites=600)
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
varGxE = 10)$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
rm(list=ls())
library(AlphaSimR)
# founder genome
founderPop = runMacs(nInd=100, nChr=10, segSites=600)
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
varGxE = 10)$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
# Trait characteristics
SP = SimParam$
new(founderPop)$
addTraitAG(100,
mean = c(10,100),
var = c(2,10),
varGxE = c(10,10))$
addSnpChip(100)$
setVarE(h2=c(0.5,0.2))
# Creating the base population
pop = newPop(founderPop[1:100])
# Create a third population derived from the first
F1Pop = randCross(pop, nCrosses=200)
F1Pop = setPheno(F1Pop, h2 = 0.4)
require(BGLR)
# 1. Pulling data from AlphaSimR code
Y = data.frame(Trait_1 = pheno(F1Pop))# Phenotypic data
Markers = pullSnpGeno(F1Pop) #Access SNP genotype data
rownames(Markers) = F1Pop@id
# 2. Genomic model - SNP effects model
fmSM<-Multitrait(y = as.matrix(Y),
ETA = list(A = list(X=Markers, model="SpikeSlab", saveEffects=TRUE)),
nIter = 300,
burnIn = 30,
verbose=FALSE)
# 2. Genomic model - SNP effects model
fmSM<-Multitrait(y = as.matrix(Y),
ETA = list(A = list(X=Markers, model="SpikeSlab", saveEffects=TRUE)),
nIter = 300,
burnIn = 30,
verbose=FALSE)
# 3. Saving
addEff = as.matrix(cbind(fmSM$ETA[[1]]$b))
# 4. BackSolving to ebvs
F1Pop@ebv = as.matrix(Markers %*% scale(addEff))
plot(F1Pop@ebv[,1], F1Pop@ebv[,2])
# 5. Selections
F1Sel = selectInd(F1Pop, 25, traits = c(1,2), use = 'ebv')
F1Sel@gxe
rm(list=ls())
# Packages
require(AlphaSimR)
# Creating the files to record the results
MeanG_pop = matrix(NA, 35)
MeanA_pop = matrix(NA, 35)
VarG_pop  = matrix(NA, 35)
# Parameters files
source("aux_files/GlobalParameters.R")
# Create the parents
source("aux_files/Create_parents.R")
# FillPipeline
source("aux_files/FillPipeline.R")
# Environmental covariate
P = runif(burninYears+futureYears)
setwd("~/marcopxt.github.io/talks_teach/SimulationsUFV_2024/5.GS_Maize")
year
year=13
as.integer(rep(paste0(year,1L),nInd(male_yt)))
male_yt = MaleYT1
male_yt@fixEff <- as.integer(rep(paste0(year,1L),nInd(male_yt)))
as.integer(rep(paste0(year,1L),nInd(male_yt)))
for(year in 1:burninYears){
p = P[year]
cat("Working on year:",year,"\n")
source("aux_files/UpdateParents.R")  # Pick new parents based on last year's data
source("aux_files/UpdateTesters.R")  # Pick new testers and hybrid parents
source("aux_files/AdvanceYearPS.R")  # Advances yield trials by a year
source("aux_files/WriteRecordsGS.R") # Write records for GS predictions
source("aux_files/UpdateResults.R")  # Track summary data
}
# Saving the info
save.image("results/BURNIN.RData")
# 3.0 Loading the scenarios
load("results/BURNIN.RData")
for(year in (burninYears+1):(burninYears+futureYears)){
p = P[year]
# 3.1 Loop
cat("Working on year:",year,"\n")
source("aux_files/UpdateParents.R")  # Pick new parents based on last year's data
source("aux_files/UpdateTesters.R")  # Pick new testers and hybrid parents
source("aux_files/AdvanceYearPS.R")  # Advances yield trials by a year
source("aux_files/UpdateResults.R")  # Track summary data
}
# 3.2 Recording results
output1 = data.frame(scenario=rep("PS", 35), # Scenario name
MeanG_pop,
MeanA_pop,
VarG_pop,
stringsAsFactors=FALSE)
# 3.3 Saving the results as RDS
saveRDS(output1,"results/Results_PS.rds")
# Loading the results
Scenario1 = readRDS("results/Results_PS.rds")
Scenario2 = readRDS("results/Results_GS.rds")
# Plot hybrid mean of genetic values over time
meanRanges = range(c(Scenario1$MeanG_pop[15:35], Scenario2$MeanG_pop[15:35]))
plot(x = 15:35, y = Scenario1$MeanG_pop[15:35], type = "l", col = "black", lwd = 3,
xlab = "Year", ylab = "Mean of genetic values", ylim = meanRanges)
lines(x = 15:35, y = Scenario2$MeanG_pop[15:35], type = "l", col = "blue", lwd = 3)
legend(x = "topleft", legend = c('Pheno', 'GS'), title = "Scenarios",
lwd = 3, lty = c(1, 1), col = c("black", "blue"), bty = "n")
# Loading the results
Scenario1 = readRDS("results/Results_PS.rds")
Scenario2 = readRDS("results/Results_GS.rds")
# Plot hybrid mean of genetic values over time
meanRanges = range(c(Scenario1$VarG_pop[15:35], Scenario2$VarG_pop[15:35]))
plot(x = 15:35, y = Scenario1$VarG_pop[15:35], type = "l", col = "black", lwd = 3,
xlab = "Year", ylab = "Mean of genetic values", ylim = meanRanges)
lines(x = 15:35, y = Scenario2$VarG_pop[15:35], type = "l", col = "blue", lwd = 3)
legend(x = "topleft", legend = c('Pheno', 'GS'), title = "Scenarios",
lwd = 3, lty = c(1, 1), col = c("black", "blue"), bty = "n")
# Loading the results
Scenario1 = readRDS("results/Results_PS.rds")
Scenario2 = readRDS("results/Results_GS.rds")
# Plot hybrid mean of genetic values over time
meanRanges = range(c(Scenario1$VarG_pop[15:35], Scenario2$VarG_pop[15:35]))
plot(x = 14:35, y = Scenario1$VarG_pop[15:35], type = "l", col = "black", lwd = 3,
xlab = "Year", ylab = "Mean of genetic values", ylim = meanRanges)
# Loading the results
Scenario1 = readRDS("results/Results_PS.rds")
Scenario2 = readRDS("results/Results_GS.rds")
# Plot hybrid mean of genetic values over time
meanRanges = range(c(Scenario1$VarG_pop[14:35], Scenario2$VarG_pop[14:35]))
plot(x = 14:35, y = Scenario1$VarG_pop[14:35], type = "l", col = "black", lwd = 3,
xlab = "Year", ylab = "Mean of genetic values", ylim = meanRanges)
lines(x = 14:35, y = Scenario2$VarG_pop[14:35], type = "l", col = "blue", lwd = 3)
legend(x = "topleft", legend = c('Pheno', 'GS'), title = "Scenarios",
lwd = 3, lty = c(1, 1), col = c("black", "blue"), bty = "n")
